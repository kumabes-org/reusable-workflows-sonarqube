name: "Reusable Workflows SonarQube"

on:
  workflow_call:
    inputs:
      runs-on:
        required: true
        type: string
      environment:
        required: true
        type: string
      working-directory:
        required: true
        type: string
      shell:
        required: true
        type: string
      project-name:
        required: true
        type: string
      language:
        required: true
        type: string
      build:
        required: false
        type: string
        default: ""

jobs:
  Quality:
    name: Quality
    runs-on: ${{ inputs.runs-on }}
    defaults:
      run:
        shell: ${{ inputs.shell }}
        working-directory: ${{ inputs.working-directory }}
    steps:
      - uses: actions/checkout@v4

      # - uses: actions/download-artifact@v3
      #   with:
      #     name: ${{ inputs.project-name }}
      #     path: ${{ github.workspace }}/${{ inputs.working-directory }}/target

      # - name: Cache SonarQube packages
      #   uses: actions/cache@v1
      #   with:
      #     path: ~/.sonar/cache
      #     key: ${{ runner.os }}-sonar
      #     restore-keys: ${{ runner.os }}-sonar

      # - name: Cache Maven packages
      #   uses: actions/cache@v1
      #   with:
      #     path: ~/.m2
      #     key: ${{ runner.os }}-m2-${{ hashFiles('**/pom.xml') }}
      #     restore-keys: ${{ runner.os }}-m2

      - uses: actions/setup-java@v4
        if: ${{ inputs.language }} == "java"
        with:
          distribution: "zulu"
          java-version: "21"

      - name: Analyze
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }} # Needed to get PR information, if any
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
          SONAR_HOST_URL: ${{ secrets.SONAR_HOST_URL }}
        run: |
          if [[ "${{ inputs.language }}" == "java" ]]; then
            count_maven=$(find . -type f -name pom.xml 2>/dev/null | wc -l)
            count_gradle_groovy=$(find . -type f -name build.gradle 2>/dev/null | wc -l)
            count_gradle_kotlin=$(find . -type f -name build.gradle.kts 2>/dev/null | wc -l)

            if [ "${count_maven}" -ge "1" ]; then
              echo "Maven Project"
              mvn -version
              ./mvnw -version
              ./mvnw -B clean verify org.sonarsource.scanner.maven:sonar-maven-plugin:sonar -f pom.xml -s settings.xml
            elif [ "${count_gradle_groovy}" -ge "1" ]; then
              echo "Gradle Project Groovy"
              gradle -version
              ./gradlew -version
              ./gradlew clean build sonar --parallel
              ls -lRth --color build
            elif [ "${count_gradle_kotlin}" -ge "1" ]; then
              echo "Gradle Project Kotlin"
              gradle -version
              ./gradlew -version
              ./gradlew clean build sonar --parallel
              ls -lRth --color build
            else
              echo "Projeto não mapeado!"
              exit 1
            fi
          elif [[ "${{ inputs.language }}" == "python" ]]; then
            echo "Python"
          elif [[ "${{ inputs.language }}" == "nodejs" ]]; then  
            echo "NodeJS"
          else
            echo "Linguagem ainda não implementada!"
            exit 1
          fi

      # - name: SonarQube Scan
      #   uses: sonarsource/sonarqube-scan-action@master
      #   env:
      #     SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
      #     SONAR_HOST_URL: ${{ secrets.SONAR_HOST_URL }}
